DevOps/DevSecOps CI/CD PIPELINE:

    Git -> Jenkins -> Terraform -> Packer

Overall Flow:
- Developer commits code.
- Jenkins builds/compiles the code (provides feedback on failure).
- Jenkins runs tests (provides feedback on failure).
- Application is packaged and set for release (can be a container).
- Once packaged, it can be provisioned or deployed.


Git: Version Control
Jenkins: CI Pipeline
Blue Ocean: CD Pipeline
Terraform: Architecture Template
Packer: AWS AMI Build

Steps:
    1: git clone app repo
    2: packer build
    3: git clone terraform repo
    4: terraform apply

Terraform Commands:
    1. terraform init
    2. terraform plan
    3. terraform validate
    4. terraform apply

To Do:
DONE - build jenkins ec2 ami and instance in terraform? Or a Jenkins BO docker container?
- Setup Jenkins and git plugins. (and probably more).
- AMI bake for Jenkins
- Jenkins config automation, including creating secrets in AWS.
- Build generic Django App
- Use Jenkins pipeline to deploy lambda django web app (using zappa?).
- Use Jenkins to deploy infrastructure using terraform
- Use Jenkins to deploy changes in website source code to dev environment
    - Run/build functional tests for dev website

* NOTE: when using terraform, terraform validate is one way of "unit testing" terraform resources